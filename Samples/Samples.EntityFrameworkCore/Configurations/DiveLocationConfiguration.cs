// ------------------------------------------------------------------------------------------------

// <auto-generated>
// ReSharper disable CheckNamespace
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable NotAccessedVariable
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantCast
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// ReSharper disable UsePatternMatching
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning



using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Samples.Domain.Entities;

namespace Samples.ObjectAccess.EFCore
{
    
// DiveLocations
    
public partial class DiveLocationConfiguration : IEntityTypeConfiguration<DiveLocation>
    
{
    

    public void Configure(EntityTypeBuilder<DiveLocation> builder)
    
    {
    

        builder.ToTable("DiveLocations", "dbo");
    

        builder.HasKey(x => x.Id).HasName("PK_DiveLocations").IsClustered();

    


        builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
    

        builder.Property(x => x.LocationName).HasColumnName(@"LocationName").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
    

        builder.Property(x => x.GpsCoordinates).HasColumnName(@"GpsCoordinates").HasColumnType("nvarchar(255)").IsRequired().HasMaxLength(255);
    

        builder.Property(x => x.DiveTypeId).HasColumnName(@"DiveTypeId").HasColumnType("uniqueidentifier").IsRequired();
    

        builder.Property(x => x.DiveDesc).HasColumnName(@"DiveDesc").HasColumnType("ntext").IsRequired();

    
        // Foreign keys
    

        builder.HasOne(a => a.DiveLocationDetail).WithOne(b => b.DiveLocation).HasForeignKey<DiveLocation>(c => c.Id).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_DiveLocations_DiveLocationDetails");
    

        builder.HasOne(a => a.DiveType).WithMany(b => b.DiveLocations).HasForeignKey(c => c.DiveTypeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_DiveLocations_DiveTypes");

    





    }
    



}

}
// </auto-generated>

