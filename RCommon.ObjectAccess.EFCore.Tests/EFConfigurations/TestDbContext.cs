// ------------------------------------------------------------------------------------------------

// <auto-generated>
// ReSharper disable CheckNamespace
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable NotAccessedVariable
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantCast
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// ReSharper disable UsePatternMatching
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using RCommon.DataServices;
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace RCommon.ObjectAccess.EFCore.Tests
{
    public class TestDbContext : RCommonDbContext, ITestDbContext
    {


        private readonly IConfiguration _configuration;


        public TestDbContext(IConfiguration configuration)
        {
            _configuration = configuration;
        }



        public DbSet<Customer> Customers { get; set; } // Customers
        public DbSet<Department> Departments { get; set; } // Departments
        public DbSet<MonthlySalesSummary> MonthlySalesSummaries { get; set; } // MonthlySalesSummary
        public DbSet<Order> Orders { get; set; } // Orders
        public DbSet<OrderItem> OrderItems { get; set; } // OrderItems
        public DbSet<Product> Products { get; set; } // Products
        public DbSet<SalesPerson> SalesPersons { get; set; } // SalesPerson
        public DbSet<SalesTerritory> SalesTerritories { get; set; } // SalesTerritory

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured && _configuration != null)
            {
                optionsBuilder.UseSqlServer(_configuration.GetConnectionString(@"TestDbContext"));
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new CustomerConfiguration());
            modelBuilder.ApplyConfiguration(new DepartmentConfiguration());
            modelBuilder.ApplyConfiguration(new MonthlySalesSummaryConfiguration());
            modelBuilder.ApplyConfiguration(new OrderConfiguration());
            modelBuilder.ApplyConfiguration(new OrderItemConfiguration());
            modelBuilder.ApplyConfiguration(new ProductConfiguration());
            modelBuilder.ApplyConfiguration(new SalesPersonConfiguration());
            modelBuilder.ApplyConfiguration(new SalesTerritoryConfiguration());
        }


    }
}
// </auto-generated>

