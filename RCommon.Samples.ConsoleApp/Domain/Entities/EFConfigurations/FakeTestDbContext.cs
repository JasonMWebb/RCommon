// ------------------------------------------------------------------------------------------------

// <auto-generated>
// ReSharper disable CheckNamespace
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable NotAccessedVariable
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantCast
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// ReSharper disable UsePatternMatching
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using System;
using System.Data;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace RCommon.Samples.ConsoleApp.Domain.Entities
{
    public class FakeTestDbContext : ITestDbContext
    {
        public DbSet<Customer> Customers { get; set; } // Customers
        public DbSet<Department> Departments { get; set; } // Departments
        public DbSet<MonthlySalesSummary> MonthlySalesSummaries { get; set; } // MonthlySalesSummary
        public DbSet<Order> Orders { get; set; } // Orders
        public DbSet<OrderItem> OrderItems { get; set; } // OrderItems
        public DbSet<Product> Products { get; set; } // Products
        public DbSet<SalesPerson> SalesPersons { get; set; } // SalesPerson
        public DbSet<SalesTerritory> SalesTerritories { get; set; } // SalesTerritory

        public FakeTestDbContext()
        {
            _database = null;

            Customers = new FakeDbSet<Customer>("CustomerId");
            Departments = new FakeDbSet<Department>("Id");
            MonthlySalesSummaries = new FakeDbSet<MonthlySalesSummary>("Year", "Month", "SalesPersonId");
            Orders = new FakeDbSet<Order>("OrderId");
            OrderItems = new FakeDbSet<OrderItem>("OrderItemId");
            Products = new FakeDbSet<Product>("ProductId");
            SalesPersons = new FakeDbSet<SalesPerson>("Id");
            SalesTerritories = new FakeDbSet<SalesTerritory>("Id");

        }

        public int SaveChangesCount { get; private set; }
        public virtual int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public virtual int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            return SaveChanges();
        }

        public virtual Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }
        public virtual Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(x => 1, acceptAllChangesOnSuccess, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DatabaseFacade _database;
        public DatabaseFacade Database { get { return _database; } }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }
    }
}
// </auto-generated>

